
diff --git a/action.yml b/action.yml
index f08cb72..3162c53 100644
--- a/action.yml
+++ b/action.yml
@@ -51,6 +51,51 @@ inputs:
     default: true
     required: false
     type: string
+  RISK_SUMMARY:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  RISK_ROLLBACK:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  RISK_BREAKING:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  RISK_FLAGGED:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  SUMMARY_CONFIG:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  SUMMARY_SCHEMA:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  SUMMARY_FEATURES:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  SUMMARY_FLAGS:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
+  SUMMARY_INCIDENTS:
+    description: 'Include summary of potential breaking changes'
+    default: true
+    required: false
+    type: string
 
 runs:
   using: "composite"
@@ -96,3 +141,12 @@ runs:
           FILE_SUMMARY: ${{ inputs.FILE_SUMMARY }}
           TEST_SUMMARY: ${{ inputs.TEST_SUMMARY }}
           BUG_SUMMARY: ${{ inputs.BUG_SUMMARY }}
+          RISK_SUMMARY: ${{ inputs.RISK_SUMMARY }}
+          RISK_ROLLBACK: ${{ inputs.RISK_ROLLBACK }}
+          RISK_BREAKING: ${{ inputs.RISK_BREAKING }}
+          RISK_FLAGGED: ${{ inputs.RISK_FLAGGED }}
+          SUMMARY_CONFIG: ${{ inputs.SUMMARY_CONFIG }}
+          SUMMARY_SCHEMA: ${{ inputs.SUMMARY_SCHEMA }}
+          SUMMARY_FEATURES: ${{ inputs.SUMMARY_FEATURES }}
+          SUMMARY_FLAGS: ${{ inputs.SUMMARY_FLAGS }}
+          SUMMARY_INCIDENTS: ${{ inputs.SUMMARY_INCIDENTS }}
diff --git a/review.py b/review.py
index 93e0798..afbf97f 100644
--- a/review.py
+++ b/review.py
@@ -10,6 +10,59 @@
 from openai.error import RateLimitError, InvalidRequestError
 
 
+CHECKS = {
+    "SUMMARY_CHECKS": [
+        {
+            "flag": "SUMMARY_SUGGEST",
+            "header": "Suggestions",
+            "goal": "Any suggestions for improving the changes in this PR?",
+        },
+        {
+            "flag": "SUMMARY_CONFIG",
+            "header": "Configuration Changes",
+            "goal": "Any configuration changes?",
+        },
+        {
+            "flag": "SUMMARY_SCHEMA",
+            "header": "Schema Changes",
+            "goal": "Any schema changes?",
+        },
+        {
+            "flag": "SUMMARY_FEATURES",
+            "header": "Features",
+            "goal": "What features where added?",
+        },
+        {
+            "flag": "SUMMARY_FLAGS",
+            "header": "Feature Flags",
+            "goal": "Any feature flags added?",
+        },
+        {
+            "flag": "SUMMARY_INCIDENTS",
+            "header": "Incidents",
+            "goal": "Any changes that appear to be in response to incidents?",
+        },
+    ],
+    "RISK_CHECKS": [
+        {
+            "flag": "RISK_ROLLBACK",
+            "header": "Rollback Capability",
+            "goal": "Any concerns about rollback capability (ex: typically associated with schema-related changes)?",
+        },
+        {
+            "flag": "RISK_BREAKING",
+            "header": "Breaking Changes",
+            "goal": "Detect breaking changes in a git diff. Breaking changes are commonly caused by new parameters to public functions which are not optional nor have a default value.",
+        },
+        {
+            "flag": "RISK_FLAGGED",
+            "header": "Flagged Risks",
+            "goal": "Anything flagged as a risk in the code/comments itself?",
+        },
+    ],
+}
+
+
 class GitFile:
     """A git file with its diff contents."""
 
@@ -170,6 +223,7 @@ def call_gpt4(
     frequency_penalty=0.5,
     presence_penalty=0.0,
     retry=0,
+    messages=None,
 ) -> str:
     """
     Call GPT-4 with the given prompt.
@@ -186,6 +240,7 @@ def call_gpt4(
     Returns:
         str: The response from GPT-4.
     """
+    messages = messages or [{"role": "user", "content": prompt}]
     try:
         engine = "gpt-4-32k"
 
@@ -214,12 +269,13 @@ def call_gpt4(
 
 
 def call_gpt(
-    prompt: str,
+    prompt: str = "",
     temperature=0.10,
     max_tokens=500,
     top_p=1,
     frequency_penalty=0.5,
     presence_penalty=0.0,
+    messages=None,
 ) -> str:
     """Call GPT-3 or GPT-4 depending on the model.
 
@@ -240,7 +296,7 @@ def call_gpt(
         openai.api_version = "2023-03-15-preview"
         openai.api_key = os.getenv("AZURE_OPENAI_API_KEY")
 
-        return call_gpt4(prompt, temperature, max_tokens, top_p, frequency_penalty, presence_penalty)
+        return call_gpt4(prompt, temperature, max_tokens, top_p, frequency_penalty, presence_penalty, messages=messages)
 
     openai.api_key = os.getenv("OPENAI_API_KEY")
     return call_gpt3(prompt, temperature, max_tokens, top_p, frequency_penalty, presence_penalty)
@@ -330,16 +386,19 @@ def summarize_file(diff):
 """
 
 
-def summarize_pr(git_diff):
-    """Summarize a git diff.
+def summarize_bugs_in_pr(git_diff):
+    """
+    Summarize bugs that may be introduced.
 
     Args:
-        git_diff (str): The git diff to summarize.
+        git_diff (str): The git diff to split.
 
     Returns:
-        str: The summary of the git diff.
+        response (str): The response from GPT-4.
     """
     gpt4_big_prompot = f"""
+Summarize bugs that may be introduced.
+
 {git_diff}
 """
     response = call_gpt(gpt4_big_prompot)
@@ -347,22 +406,31 @@ def summarize_pr(git_diff):
     return response
 
 
-def summarize_bugs_in_pr(git_diff):
-    """
-    Summarize bugs that may be introduced.
+def request_goals(git_diff, goals: list):
+    messages = []
+    output = ""
+    for goal in goals:
+        prompt = f"""
+{goal}
 
-    Args:
-        git_diff (str): The git diff to split.
+{git_diff}
+"""
+        messages.append({"role": "user", "content": prompt})
 
-    Returns:
-        response (str): The response from GPT-4.
-    """
-    gpt4_big_prompot = f"""
-Summarize bugs that may be introduced.
+        response = call_gpt(messages=messages)
+        logging.info(response)
+        output += response
+    return output
+
+
+def request_goal(git_diff, goal):
+    prompt = f"""
+{goal}
 
 {git_diff}
 """
-    response = call_gpt(gpt4_big_prompot)
+
+    response = call_gpt(prompt)
     logging.info(response)
     return response
 
@@ -373,33 +441,101 @@ def summarize_files(git_diff):
 # Summary by GPT-4
 """
 
-    if(os.getenv("FULL_SUMMARY", "true").lower() == "true"):
-        summary += f"""
-{summarize_pr(git_diff)}
-"""
+    summary += summarize_pr(git_diff)
 
-    if(os.getenv("FILE_SUMMARY", "true").lower() == "true"):
-        summary += """
+    if os.getenv("FILE_SUMMARY", "true").lower() == "true":
+        file_summary = """
 ## Changes
+""".join(
+            summarize_file(diff) for diff in split_diff(git_diff)
+        )
+
+        summary += file_summary
+
+        summary += f"""
+### Summary of File Changes
+{request_goal(file_summary, goal="Summarize the changes to the files.")}
 """
-        for diff in split_diff(git_diff):
-            summary += summarize_file(diff)
 
-    if(os.getenv("TEST_SUMMARY", "true").lower() == "true"):
+    if os.getenv("TEST_SUMMARY", "true").lower() == "true":
         summary += f"""
 ## Test Coverage
 {summarize_test_coverage(git_diff)}
 """
 
-    if(os.getenv("BUG_SUMMARY", "true").lower() == "true"):
+    if os.getenv("BUG_SUMMARY", "true").lower() == "true":
         summary += f"""
 ## Potential Bugs
 {summarize_bugs_in_pr(git_diff)}
 """
 
+    summary += summarize_risk(git_diff)
+
     return summary
 
 
+def summarize_pr(git_diff):
+    """
+    Summarize a PR.
+
+    Args:
+        git_diff (str): The git diff to summarize.
+
+    Returns:
+        str: The summary of the PR.
+    """
+    text = ""
+    if os.getenv("FULL_SUMMARY", "true").lower() == "true":
+        text += f"""
+{request_goal(git_diff, goal="")}
+"""
+
+        text += check_goals(git_diff, CHECKS["SUMMARY_CHECKS"])
+    return text
+
+
+def summarize_risk(git_diff):
+    """
+    Summarize potential risks.
+
+    Args:
+        git_diff (str): The git diff to split.
+
+    Returns:
+        response (str): The response from GPT-4.
+    """
+    text = ""
+    if os.getenv("RISK_SUMMARY", "true").lower() == "true":
+        text += """
+## Potential Risks
+
+"""
+        text += check_goals(git_diff, CHECKS["RISK_CHECKS"])
+    return text
+
+
+def check_goals(git_diff, checks, indent="###"):
+    """
+    Check goals.
+
+    Args:
+        git_diff (str): The git diff to check.
+        checks (list): The checks to run.
+
+    Returns:
+        str: The output of the checks.
+    """
+    return "".join(
+        f"""
+{indent} {check["header"]}
+
+{request_goal(git_diff, goal=check["goal"])}
+"""
+        for check in checks
+        if os.getenv(check["flag"], "true").lower() == "true"
+    )
+
+
 def get_review(pr_patch):
     """Get a review of a PR.
 
